// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @unique @default(autoincrement())
  createdAt DateTime   @default(now())
  username  String     @unique
  email     String     @unique
  password  String
  posts     Post[]
  comments  Comment[]
  likes     Likes[]
  follow    Follower[]
}

model Follower {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  user_id           User     @relation(fields: [userId], references: [id])
  userId            Int      @unique
  following_user_id Int
  follower_user_id  Int
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  title       String
  url         String      @unique
  description String
  ingredients String
  details     String
  author      User?       @relation(fields: [authorId], references: [id])
  authorId    Int?
  tags        PostToTag[]
  comments    Comment[]
  like        Likes?
}

model Tag {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  name      String      @unique
  posts     PostToTag[]
}

model PostToTag {
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([postId, tagId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  amount    Int      @default(0)
  user      User[]
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?     @unique
}
